Element
- VariableElement：代表变量
- TypeElement：代表 class


在编写此类框架的时候，一般需要建立多个module，例如本文即将实现的例子：

lib-annotation 用于存放注解等，Java模块
lib-processor 用于编写注解处理器，Java模块
lib-api 用于给用户提供使用的API，本例为Andriod模块

Class类：
getSimepleName（）：返回类名
getName();          返回虚拟机中类的表示
getCanonicalName（） 返回全限定类名（包名+类名）

区别如下：
getName()
数组类型返回：
[B
[Ljava.text.NumberFormat;
内部类返回：
com.example.lib_annotation.JavaTest$Inner

getCanonicalName()：
数组类型返回：
byte[]
java.text.NumberFormat[]
内部类返回：
com.example.lib_annotation.JavaTest.Inner

普通类返回都一样


init(ProcessingEnvironment processingEnvironment): 每一个注解处理器类都必须有一个空的构造函数。然而，这里有一个特殊的init()方法，
它会被注解处理工具调用，并输入ProcessingEnviroment参数。ProcessingEnviroment提供很多有用的工具类Elements,Types和Filer。

process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment): 这相当于每个处理器的主函数main()。
你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。输入参数RoundEnviroment，可以让你查询出包含特定注解的被注解元素。

getSupportedAnnotationTypes(): 这里你必须指定，这个注解处理器是注册给哪个注解的。注意，它的返回值是一个字符串的集合，
包含本处理器想要处理的注解类型的合法全称。换句话说，你在这里定义你的注解处理器注册到哪些注解上。

getSupportedSourceVersion(): 用来指定你使用的Java版本。通常这里返回SourceVersion.latestSupported()。
然而，如果你有足够的理由只支持Java 7的话，你也可以返回SourceVersion.RELEASE_7。我推荐你使用前者。
